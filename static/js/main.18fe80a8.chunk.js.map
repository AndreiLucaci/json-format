{"version":3,"sources":["components/left-panel/LeftPanel.tsx","services/notificationService.ts","components/right-panel/RightPanel.tsx","engine/JsonFormatter.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Content","Layout","LeftPannel","props","style","width","height","language","options","minimap","enabled","wordWrap","theme","onChange","newValue","newVal","undefined","notificationService","notification","open","placement","error","RightPanel","useState","editor","setEditor","backgroundColor","padding","span","className","type","icon","CopyOutlined","size","onClick","range","getModel","getFullModelRange","focus","setSelection","document","execCommand","message","description","SmallDashOutlined","err","readOnly","renderFinalNewline","renderWhitespace","value","inputText","editorDidMount","DEFAULT_OPTIONS","spaces","JsonFormatterEngine","jsonInput","JSON","parse","jsonOptions","stringify","Header","Footer","Text","Typography","Title","Link","App","engine","setInputText","position","zIndex","marginTop","textAlign","fontFamily","color","top","val","formatterValue","format","bottom","marginBottom","fontSize","title","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.18fe80a8.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { Layout } from \"antd\";\n\nimport MonacoEditor from \"react-monaco-editor\";\n\nimport { LeftPanelProps } from \"../../types\";\n\nconst { Content } = Layout;\n\nexport const LeftPannel: FC<LeftPanelProps> = (props: LeftPanelProps) => {\n  const onInputChange = (newVal: string) => {\n    if (newVal !== undefined) {\n      props.onChange(newVal);\n    }\n  };\n\n  return (\n    <Content style={{ width: \"100%\", height: \"100%\" }}>\n      <MonacoEditor\n        width=\"100%\"\n        height=\"100%\"\n        language=\"json\"\n        options={{\n          minimap: {\n            enabled: true,\n          },\n          language: \"json\",\n          wordWrap: \"on\",\n        }}\n        theme=\"night-dark\"\n        onChange={(newValue) => onInputChange(newValue)}\n      ></MonacoEditor>\n    </Content>\n  );\n};\n\nexport default LeftPannel;\n","import { notification } from \"antd\";\nimport { ArgsProps as NotificationOptions } from \"antd/lib/notification\";\n\nexport interface INotificationService {\n  open(options: NotificationOptions): void;\n  error(options: NotificationOptions): void;\n}\n\nexport class NotificationService implements INotificationService {\n  open(options: NotificationOptions): void {\n    notification.open({\n      placement: \"bottomRight\",\n      ...options,\n    });\n  }\n\n  error(options: NotificationOptions): void {\n    notification.error({\n      placement: \"bottomRight\",\n      ...options,\n    });\n  }\n}\n\nexport const notificationService: INotificationService = new NotificationService();\n","import { Layout, Button, Row, Col } from \"antd\";\nimport React, { FC, useState } from \"react\";\nimport { RightPanelProps } from \"../../types\";\nimport { CopyOutlined, SmallDashOutlined } from \"@ant-design/icons\";\n\nimport { notificationService } from \"../../services\";\n\nimport MonacoEditor from \"react-monaco-editor\";\nimport \"../components.css\";\nimport * as monacoEditor from \"monaco-editor/esm/vs/editor/editor.api\";\n\nconst { Content } = Layout;\n\nexport const RightPanel: FC<RightPanelProps> = (props: RightPanelProps) => {\n  const [\n    editor,\n    setEditor,\n  ] = useState<monacoEditor.editor.IStandaloneCodeEditor>();\n\n  const openConfirmationNotification = () => {\n    notificationService.open({\n      message: \"Copy / paste completed.\",\n      description: \"Code pasted to clipboard succesfully\",\n      icon: <SmallDashOutlined />,\n    });\n  };\n\n  const copyOnClick = () => {\n    try {\n      if (editor) {\n        const range = editor.getModel()!.getFullModelRange();\n        editor.focus();\n        editor.setSelection(range);\n        document.execCommand(\"copy\");\n\n        openConfirmationNotification();\n      } else {\n        notificationService.error({\n          message: \"No editor found\",\n        });\n      }\n    } catch (err) {\n      notificationService.error({\n        message: err.message,\n      });\n    }\n  };\n\n  return (\n    <Content\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"#272821\",\n      }}\n    >\n      <Content>\n        <Row style={{ padding: \"10px 0\" }}>\n          <Col span={16}></Col>\n          <Col span={8}>\n            <Button\n              className=\"code-btn\"\n              type=\"dashed\"\n              icon={<CopyOutlined />}\n              size={\"large\"}\n              onClick={copyOnClick}\n            >\n              copy_to_clipboard()\n            </Button>\n          </Col>\n        </Row>\n      </Content>\n\n      <MonacoEditor\n        width=\"100%\"\n        height=\"100%\"\n        theme=\"vs-dark\"\n        options={{\n          minimap: {\n            enabled: true,\n          },\n          language: \"json\",\n          readOnly: true,\n          renderFinalNewline: true,\n          renderWhitespace: \"all\",\n          wordWrap: \"on\",\n        }}\n        value={props.inputText}\n        editorDidMount={(editor) => setEditor(editor)}\n      ></MonacoEditor>\n    </Content>\n  );\n};\n\nexport default RightPanel;\n","import { JsonFormatterOptions } from \"../types/engine.types\";\n\nconst DEFAULT_OPTIONS: JsonFormatterOptions = {\n  spaces: 2,\n};\n\nexport interface IJsonFormatterEngine {\n  format(value: string, options?: JsonFormatterOptions): string;\n}\n\nexport class JsonFormatterEngine implements IJsonFormatterEngine {\n  format(value: string, options?: JsonFormatterOptions): string {\n    try {\n      const jsonInput = JSON.parse(value);\n\n      const jsonOptions = options ?? DEFAULT_OPTIONS;\n\n      return JSON.stringify(jsonInput, null, jsonOptions.spaces);\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n","import React, { FC, useState } from \"react\";\nimport { Layout, Typography, Row, Col, Anchor } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nimport { LeftPannel, RightPanel } from \"./components\";\n\nimport \"./App.css\";\nimport { IJsonFormatterEngine, JsonFormatterEngine } from \"./engine\";\n\nconst { Header, Content, Footer } = Layout;\nconst { Text, Title, Link } = Typography;\n\nconst App: FC = () => {\n  const engine: IJsonFormatterEngine = new JsonFormatterEngine();\n  const [inputText, setInputText] = useState(\"\");\n\n  const onInputChange = (val: string) => {\n    let formatterValue = \"\";\n    try {\n      formatterValue = engine.format(val);\n    } catch (err) {\n      formatterValue = err.message;\n    }\n\n    setInputText(formatterValue);\n  };\n\n  return (\n    <Layout>\n      <Header\n        style={{\n          position: \"fixed\",\n          zIndex: 1,\n          width: \"100%\",\n          height: \"7vh\",\n        }}\n      >\n        <Title\n          style={{\n            marginTop: \"10px\",\n            textAlign: \"center\",\n            fontFamily:\n              \"'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace\",\n          }}\n        >\n          <Text style={{ color: \"#78dde8\" }}>JSON</Text>{\" \"}\n          <Text style={{ color: \"#eff2e2\" }}>formatter -</Text>{\" \"}\n          <Text style={{ color: \"#a9dc76\" }}>simple prettifier</Text>{\" \"}\n          <Text style={{ color: \"#ff6189\" }}>for</Text>{\" \"}\n          <Text style={{ color: \"#78dde8\" }}>JSON</Text>{\" \"}\n        </Title>\n      </Header>\n      <Content\n        style={{\n          position: \"relative\",\n          top: \"7vh\",\n          height: \"78vh\",\n          width: \"100wh\",\n        }}\n      >\n        <Row style={{ height: \"100%\" }}>\n          <Col span={12}>\n            <LeftPannel onChange={onInputChange}></LeftPannel>\n          </Col>\n          <Col span={12}>\n            <RightPanel inputText={inputText}></RightPanel>\n          </Col>\n        </Row>\n      </Content>\n      <Footer\n        style={{\n          position: \"fixed\",\n          zIndex: 1,\n          width: \"100vw\",\n          bottom: \"0px\",\n          marginBottom: \"5px\",\n          textAlign: \"center\",\n          height: \"3vh\",\n          backgroundColor: \"#272821\",\n        }}\n      >\n        <Text\n          style={{\n            fontSize: \"10px\",\n            textAlign: \"center\",\n            fontFamily:\n              \"'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace\",\n          }}\n        >\n          <Text style={{ color: \"#eff2e2\" }}>{\"{ \"} </Text>\n          <Text style={{ color: \"#78dde8\" }}>Andrei Lucaci</Text>{\" \"}\n          <Text style={{ color: \"#ff6189\" }}>©2021</Text>{\" \"}\n          <Text style={{ color: \"#eff2e2\" }}>-</Text>{\" \"}\n          <Link\n            style={{ color: \"#a9dc76\" }}\n            title=\"github\"\n            href=\"https://github.com/andreilucaci\"\n          >\n            https://github.com/andreilucaci\n          </Link>{\" \"}\n          <Text style={{ color: \"#eff2e2\" }}>-</Text>{\" \"}\n          <Text style={{ color: \"#78dde8\" }}>JSON</Text>{\" \"}\n          <Text style={{ color: \"#eff2e2\" }}>Format</Text>{\" \"}\n          <Text style={{ color: \"#eff2e2\" }}>{\" }\"}</Text>\n        </Text>\n      </Footer>\n    </Layout>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"bg-color\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}